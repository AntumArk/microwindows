# Micro-Windows Makefile for DJGPP
# by Georg Potthast August 2015
# based on makefile by V. Rogachev
#
# use the makefile with DOS command line, not bash
# tested with Make 4.1

# export variables for sublevel makefiles
export MW_DIR_SRC CC CFLAGS AS LD AR STRIP HOSTCC HOSTCFLAGS HAVEMSFONTS VESA DOS_DJGPP

# set to one to build microwin and/or nano-X demos
MICROWIN=1
NANOX=1
#select just one or more demos for testing
#TESTPROG=1

# network libs location
NETLIBS=
#NETLIBS=-lsocket -lnsl

# grxlib library location
LIBGRX=-lgrx20
# set to 1 to use VESA screen driver instead of GRX
VESA=1

# for recursive makes
MW_DIR_SRC := $(CURDIR)
MW_DIR_BIN := $(CURDIR)/bin

# set variable to compile with gcc
CC = gcc
AS = as
LD = ld
AR = ar
STRIP = strip
HOSTCC = gcc
HOSTCFLAGS = -I$(MW_DIR_SRC)/include
DOS_DJGPP = Y
#OPTIMIZE = 1
#enable EPRINTF and DPRINTF statements in code
#DEBUG= 1
#VERBOSE= 1

# DJGPP cc flags, includes
INC = -I$(MW_DIR_SRC)/include

CFLAGS = $(INC) -s #just standard warnings
ifdef OPTIMIZE
CFLAGS += -O3
endif
ifdef VERBOSE
CFLAGS += -v
else
.SILENT:
endif

#MATHLIB
#CLIBS += -lm

CFLAGS += -DHAVE_FILEIO=1 -DMW_FEATURE_IMAGES=1 -DMW_FEATURE_TIMERS=1
CFLAGS += -DHAVE_SIGNAL=0 

ifdef DEBUG
#HAVE_FPRINTF=0 uses Nano-X error function and outputs to STDOUT=SCREEN
CFLAGS += -DHAVE_FPRINTF=1
#the line below includes symbolic debugging information
CFLAGS += -Wall -g
else
CFLAGS += -DHAVE_FPRINTF=0
endif

#Add defines to CFLAGS variable

# uncomment the following line to link the nano-X application
# with the server.  This is required, if no network is present,
# or for speed or debugging.  This affects the nano-X server only.
LINK_APP_INTO_SERVER=1
#set to one if linking app into server above
CFLAGS += -DNONETWORK=1

# Window move algorithms, change for tradeoff between cpu speed and looks
# UPDATEREGIONS paints in update clipping region only for better look and feel
# ERASEMOVE repaints only backgrounds while window dragging, quicker
# XORMOVE moves windows only after button up, quickest 

#CFLAGS += -DUPDATEREGIONS=1
#CFLAGS += -DERASEMOVE=1
CFLAGS += -DXORMOVE=1

#set to 1 for MS FONTS
#CFLAGS += -DHAVEMSFONTS=1

# define arch: DOS & DJGPP
CFLAGS += -DDOS_DJGPP=1 -DMSDOS=1 

#needed in devimage.c
CFLAGS += -DHAVE_MMAP=0

#link in window manager - decorate windows and color background
#needed for nanowm and better for nxlib
CFLAGS += -DNANOWM=1

#set to 1 for BMP SUPPORT
CFLAGS += -DHAVE_BMP_SUPPORT=1
#set to 1 for GIF SUPPORT
#CFLAGS += -DHAVE_GIF_SUPPORT=1
#set to 1 for PNM SUPPORT
#CFLAGS += -DHAVE_PNM_SUPPORT=1
#set to 1 for XPM SUPPORT
CFLAGS += -DHAVE_XPM_SUPPORT=1

#link in window manager - decorate windows and color background
#needed for nanowm and better for nxlib
CFLAGS += -DNANOWM=1

#put libs mentioned below in djgpp\lib
##set for JPEG support - libjpeg.a
#CFLAGS += -DHAVE_JPEG_SUPPORT=1
#CLIBS += -ljpeg
##set for PNG support - libpng.a + libz.a
#CFLAGS += -DHAVE_PNG_SUPPORT=1
#CLIBS += -lpng -lz
##set for TIFF support - libtiff.a
#CFLAGS += -DHAVE_TIFF_SUPPORT=1
#CLIBS += -ltiff

#font support settings

#CFLAGS += -DHAVE_FNT_SUPPORT=1
#CFLAGS += -DFNT_FONT_DIR="../fonts/fnt/" 
#"fonts\\fnt\\"

#CFLAGS += -DHAVE_PCF_SUPPORT=1
#CFLAGS += -DPCF_FONT_DIR="../fonts/pcf/"
#need zlib for gz format
#CFLAGS += -DHAVE_PCFGZ_SUPPORT=1
#CLIBS += -lz

#CFLAGS += -DHAVE_FREETYPE_2_SUPPORT=1
#plus compile font_freetype2.o in engine/makefile!
#CFLAGS += -DFREETYPE_FONT_DIR="../fonts/truetype/"
#CLIBS += -lfreetype

#CFLAGS += -DHAVE_T1LIB_SUPPORT=1
#T1LIB_FONT_DIR = "../fonts/type1/"
#CLIBS += -lt1

# SCREEN SETTINGS #########################
# these settings are used if the environment variable NANOSCR is not used
# e.g. NANOSCR=800 600 565 for TRUECOLOR565
SCREEN_WIDTH=800
#1024
SCREEN_HEIGHT=600
#768
SCREEN_DEPTH=32

#/* pixel is packed 8 bits 1, 4 or 8 pal index*/
#SCREEN_PIXTYPE = MWPF_PALETTE       

#/* pixel is packed 32 bits byte order |B|G|R|A|*/
SCREEN_PIXTYPE = MWPF_TRUECOLOR8888 

#/* pixel is packed 32 bits byte order |R|G|B|A|*/
#SCREEN_PIXTYPE = MWPF_TRUECOLORABGR 

#/* pixel is packed 24 bits byte order |B|G|R|*/
#SCREEN_PIXTYPE = MWPF_TRUECOLOR888  

#/* pixel is packed 16 bits little endian RGB565*/
#SCREEN_PIXTYPE = MWPF_TRUECOLOR565  

ifdef SCREEN_HEIGHT
CFLAGS += -DSCREEN_HEIGHT=$(SCREEN_HEIGHT)
endif

ifdef SCREEN_WIDTH
CFLAGS += -DSCREEN_WIDTH=$(SCREEN_WIDTH)
endif

ifdef SCREEN_DEPTH
CFLAGS += -DSCREEN_DEPTH=$(SCREEN_DEPTH)
endif

ifdef SCREEN_PIXTYPE
CFLAGS += -DSCREEN_PIXTYPE=$(SCREEN_PIXTYPE)
endif

# define ALL target ********************************

ALL += init drivers/libmwdrivers.a fonts/libfonts.a engine/libmwengine.a mwin/libmwin.a mwin/bmp/libimages.a nanox/libnano-X.a nxlib/libNX11.a

ifdef MICROWIN
ALL += mwindemos 
endif

ifdef NANOX 
ALL += nanoxdemos
endif

ifdef TESTPROG
ALL += testprog
endif

#define LIBS and NANOLIBS variable - CLIBS = common libs **************

ifndef VESA  
#LIBGRX=-lgrx20
CLIBS += $(LIBGRX) 
endif

#drivers/libmwdrivers.a
#CLIBS += -lmwdrivers
#fonts/libfonts.a 
#CLIBS += -lfonts
#engine/libmwengine.a
#CLIBS += -lmwengine

#mwin/bmp/libimages.a 
CLIBS += -limages

#needed by font libraries as last parameter in the line
CLIBS += -lz

#nanox/libnano-X.a 
NANOLIBS = -lnano-X $(CLIBS)

#mwin/libmwin.a 
LIBS = -lmwin $(CLIBS)

LIBS += $(NETLIBS)

CFLAGS += -L$(MW_DIR_SRC)/lib

#define mwin demo programs
MTARGETS1 := malpha mtest mtest2 mdemo mstretch
#MTARGETS1 += mterm mine muserfd # not working in DOS
MTARGETS2 := $(addprefix $(MW_DIR_BIN)/,$(MTARGETS1))
MTARGETS := $(addsuffix .exe,$(MTARGETS2))

#define nanox demo programs
NTARGETS1 := demo move nxeyes landmine world nxclock demo2 grabdemo demo5 demo6 snap_ppm 
NTARGETS1 += tsdemo polydemo slider arcdemo blitdemo bmpdemo fontdemo ftdemo
#NTARGETS += nterm demo4 nxview snap_jpg ntetris info tux getselection npanel # not working in DOS
NTARGETS2 := $(addprefix $(MW_DIR_BIN)/,$(NTARGETS1))
NTARGETS := $(addsuffix .exe,$(NTARGETS2))

#####################
all: $(ALL)

init:
	-$("shell md lib 2>NUL")
	-$("shell md bin 2>NUL")   
	-$("shell md obj 2>NUL")

mwindemos: $(MTARGETS)

demos/mwin/%.o: %.c
	$(CC) $(CFLAGS) -c $<

$(MW_DIR_BIN)/%.exe: demos/mwin/%.o
	echo "compiling $@"
	$(CC) $(CFLAGS) -o $@ $< $(LIBS)

nanoxdemos: $(NTARGETS)

demos/nanox/%.o: %.c
	$(CC) $(CFLAGS) -c $<

$(MW_DIR_BIN)/%.exe: demos/nanox/%.o
	echo "compiling $@"
	$(CC) $(CFLAGS) -o $@ $< $(NANOLIBS)
	
testprog:
	$(CC) $(CFLAGS) -o bin\malpha.exe demos\mwin\malpha.c $(LIBS)   
	$(CC) $(CFLAGS) -o bin\nxview.exe demos\nanox\nxview.c $(NANOLIBS) -lz

#####################
clean:
	-$("shell del mwin\*.o 2>NUL")
	-$("shell del mwin\*.a 2>NUL")
	-$("shell del mwin\bmp\*.o 2>NUL")
	-$("shell del mwin\bmp\*.a 2>NUL")
	-$("shell del mwin\winlib\*.o 2>NUL")
	-$("shell del mwin\winlib\*.a 2>NUL")
	-$("shell del fonts\*.o 2>NUL")
	-$("shell del fonts\*.a 2>NUL")
	-$("shell del nanox\*.o 2>NUL")
	-$("shell del nanox\*.a 2>NUL")
	-$("shell del drivers\*.o 2>NUL")
	-$("shell del drivers\*.a 2>NUL")
	-$("shell del engine\*.o 2>NUL")
	-$("shell del engine\*.a 2>NUL")
	-$("shell del demos\mwin\*.o 2>NUL")
	-$("shell del demos\nanox\*.o 2>NUL")
	-$("shell del lib\*.a 2>NUL")
# or demos will not be compiled again	
	-$("shell del bin\*.exe  2>NUL")
	-$("shell del nxlib\*.o 2>NUL")
	-$("shell del nxlib\*.a 2>NUL")
	-$("shell del nxlib\test\*.exe 2>NUL")
	-$("shell del nxlib\ptest\*.exe 2>NUL")
	-$(MAKE) -C nxlib clean
	echo "Cleaned *.o, *.a, and *.exe files"

#there is a file install in the directory - so define as phony
.PHONY: install
install:
	copy lib\*.a \djgpp\lib
	copy inc \djgpp\include\mwin
	
#############################################################################
#targets for libraries - engine,fonts,drivers make just object files, no libs
#using AR these will be merged into libmwin.a and libnano-X.a

nanox/libnano-X.a: 
	echo "generating $@"
	$(MAKE) -C nanox  -f ../contrib/djgpp/Makefile-nanox

#obsolete
#mwin/winlib/libwinlib.a:
#	$(MAKE) -C mwin/winlib

mwin/libmwin.a:
	echo "generating $@"
	$(MAKE) -C mwin -f ../contrib/djgpp/Makefile-mwin
	
fonts/libfonts.a:
	echo "generating font object files"    
	$(MAKE) -C fonts -f ../contrib/djgpp/Makefile-fonts

engine/libmwengine.a:
	echo "generating engine object files"    
	$(MAKE) -C engine -f ../contrib/djgpp/Makefile-engine

drivers/libmwdrivers.a:
	echo "generating driver object files"    
	$(MAKE) -C drivers -f ../contrib/djgpp/Makefile-drivers

mwin/bmp/libimages.a:
	echo "generating $@"    
	$(MAKE) -C mwin/bmp -f ../../contrib/djgpp/Makefile-bmp

nxlib/libNX11.a:
	echo "generating $@"
	$(MAKE) -C nxlib  
