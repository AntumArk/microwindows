##############################################################################
# Microwindows Architecture rules Makefile
# Updated 2018 Greg Haerr
# Copyright (c) 2000 Martin Jolicoeur, Greg Haerr
# Portions Copyright (c) 2002 by Koninklijke Philips Electronics N.V.
#
# Architecture-specific rules
#
# Current Target Platforms (set with ARCH= in config)
# LINUX-NATIVE
# LINUX-AVR32 (BIGENDIAN=Y)
# LINUX-TCC
# LINUX-ARM
# UCLINUX-ARM
# LINUX-MIPS
# LINUX-POWERPC (BIGENDIAN=Y)
# LINUX-SPARC (BIGENDIAN=Y)
# SOLARIS (BIGENDIAN=Y)
# LINUX-BLACKFIN
# LINUX-SH
# LINUX-LINARO (RPI cross compile)
# MACOSX
# RTEMS
# ECOS
# PSP (Sony PSP)
# NDS (Nintendo DS)
# TRIMEDIA
# CYGWIN
# ANDROID
# EMSCRIPTEN

##############################################################################
# Default tools names (overriden in platform-specific section below)
##############################################################################
TOOLSPREFIX = $(NATIVETOOLSPREFIX)
HOSTCC = gcc				# host compiler
COMPILER = gcc				# cross compiler
CXX_COMPILER = g++			# c++ compiler
CPP = cpp 					# suffix for c++ files
ARCHIVER = ar				# static library creator
ARFLAGS = rs				# ar flags
LINKER = ld					# linker
CP = cp						# copy
MV = mv						# move
SHELL = /bin/sh
LIBM = -lm
LIBFLEX = -lfl
NM = $(TOOLSPREFIX)nm		# following used for ECOS port only
STRIP = $(TOOLSPREFIX)strip
OBJCOPY = $(TOOLSPREFIX)objcopy

##############################################################################
# Default tools locations (overridden in config)
##############################################################################
NATIVETOOLSPREFIX        =
ARMTOOLSPREFIX           = arm-linux-
ANDROIDTOOLSPREFIX       = arm-linux-androideabi-
RPITOOLSPREFIX           = arm-linux-gnueabihf-
MIPSTOOLSPREFIX          = mipsel-linux-
POWERPCTOOLSPREFIX       = powerpc-linux-
SHTOOLSPREFIX            = sh-linux-gnu
AVR32TOOLSPREFIX         = avr32-linux-
BLACKFINTOOLSPREFIX      = bfin-uclinux-
PSPTOOLSPREFIX           = psp-

##############################################################################
# Warning options
##############################################################################
WARNINGS += -Wunused-variable
WARNINGS += -Wmissing-prototypes
ifeq ($(DEBUG), Y)
WARNINGS += -Wall
WARNINGS += -Wpointer-arith
WARNINGS += -Wbad-function-cast
#WARNINGS += -Wstrict-prototypes				# win32 FARPROC can't be strict
else
WARNINGS += -Wno-pointer-to-int-cast			# win32 converts pointers to ints with menuID,ctrlID,atoms,rsrcs
endif

##############################################################################
# Handle general architecture options
##############################################################################
ifeq ($(SHAREDLIBS), Y)
CFLAGS += -fpic
endif

# Set special optimization flags with OPTIMIZE= in config when not =Y or =N
ifeq ($(OPTIMIZE), Y)
CFLAGS += -O3
else
ifneq ($(OPTIMIZE), N)
CFLAGS += $(OPTIMIZE)
endif
endif

ifeq ($(DEBUG), Y)
CFLAGS += -g
DEFINES += -DDEBUG=1
#CFLAGS += -ggdb
else
#DEFINES += -DNDEBUG
endif

##############################################################################
# Platform dependent compilers, tools & flags
##############################################################################
ifeq ($(ARCH), LINUX-NATIVE)
DEFINES += -DLINUX=1 -DUNIX=1
endif

ifeq ($(ARCH), LINUX-AVR32)
TOOLSPREFIX = $(AVR32TOOLSPREFIX)
DEFINES += -DLINUX=1 -DUNIX=1
CFLAGS += -D_GNU_SOURCE
# include the following line for static libraries
#LDFLAGS += -static
endif

ifeq ($(ARCH), LINUX-TCC)
COMPILER = tcc
CXX_COMPILER = tcc
DEFINES += -DLINUX=1 -DUNIX=1
CFLAGS += -Dlinux=1
# include the following line for static libraries
#LDFLAGS += -static
endif

ifeq ($(ARCH), LINUX-ARM)
TOOLSPREFIX = $(ARMTOOLSPREFIX)
DEFINES += -DLINUX=1 -DUNIX=1 -DARCH_NEED_ALIGN32
CFLAGS += -mstructure-size-boundary=8
#CFLAGS += -s
endif

ifeq ($(ARCH), LINUX-LINARO)
TOOLSPREFIX = $(RPITOOLSPREFIX)
DEFINES += -DLINUX=1 -DUNIX=1 -DARCH_NEED_ALIGN32 -DLINUX_LINARO
CFLAGS += -mstructure-size-boundary=8
endif

ifeq ($(ARCH), UCLINUX-ARM)
TOOLSPREFIX = $(ARMTOOLSPREFIX)
DEFINES += -DLINUX=1 -DUNIX=1 -DARM_LINUX -D__uClinux__
CFLAGS += -mstructure-size-boundary=8
LDFLAGS += -elf2flt
FLTFLAGS += -s 64000
endif

ifeq ($(ARCH), LINUX-MIPS)
TOOLSPREFIX = $(MIPSTOOLSPREFIX)
DEFINES += -DLINUX=1 -DUNIX=1 -DARCH_NEED_ALIGN32
CFLAGS += -msoft-float
#CFLAGS += -s
endif

ifeq ($(ARCH), LINUX-POWERPC)
TOOLSPREFIX = $(POWERPCTOOLSPREFIX)
DEFINES += -DLINUX=1 -DUNIX=1
# Added define to avoid compiler error for PPC
DEFINES += -DARCH_LINUX_POWERPPC=1
CFLAGS += -msoft-float
#CFLAGS += -s
endif

ifeq ($(ARCH), LINUX-SH)
TOOLSPREFIX =$(SHTOOLSPREFIX)
DEFINES += -DLINUX=1 -DUNIX=1
CFLAGS += -m1 -m3
endif

ifeq ($(ARCH), LINUX-SPARC)
DEFINES += -DLINUX=1 -DUNIX=1 -DMW_CPU_BIG_ENDIAN=1
# Added define to avoid compiler error for SPARC
DEFINES += -DARCH_LINUX_SPARC=1
# include the following line for static libraries
#LDFLAGS += -static
endif

ifeq ($(ARCH), LINUX-BLACKFIN)
TOOLSPREFIX = $(BLACKFINTOOLSPREFIX)
DEFINES += -DLINUX=1 -DUNIX=1 -Dlinux -DBLACKFIN
LDFLAGS += -Wl,-elf2flt
endif

ifeq ($(ARCH), SOLARIS)
DEFINES += -DUNIX=1 -DMW_CPU_BIG_ENDIAN=1
LDFLAGS += -lsocket -lnsl -lrt
endif

ifeq ($(ARCH), FREEBSD-X86)
# __FreeBSD__ is automatically defined
DEFINES += -DUNIX=1
CFLAGS += -Wall
LDFLAGS += -lvgl
# For forkpty in nxterm.
NANOXCLIENTLIBS += -lutil
endif

ifeq ($(ARCH), MACOSX)
COMPILER = clang
DEFINES += -DUNIX=1 -DMACOSX=1
LIBFLEX = -ll
endif

ifeq ($(ARCH), RTEMS)
    COMPILER = $(RTEMS_CC)
    CXX_COMPILER = $(RTEMS_CC)
    INCLUDEDIRS += -I$(RTEMS_MAKEFILE_PATH)/lib/include
    DEFINES += -DUNIX=1 -DRTEMS=1 -DHAVE_MMAP=0 -DHAVE_SELECT=0
    CFLAGS += -O4 -fasm -g -B$(RTEMS_MAKEFILE_PATH)/lib/ -specs bsp_specs -qrtems
# For RTEMS all variables are passed from Makefile.rtems after being
# extracted from the BSP specific installation.
ifneq ($(findstring rtems_init,$(LDFLAGS)),rtems_init)
    OS_OBJS = $(MW_DIR_OBJ)/FilesystemImage.o $(MW_DIR_OBJ)/rtems_init.o 
    LDFLAGS += $(OS_OBJS)
endif
endif

ifeq ($(ARCH), ECOS)
    TOOLSPREFIX = $(ARMTOOLSPREFIX)
    ECOS_PREFIX = /work/iPAQ/ecos/install
    INCLUDEDIRS += -I$(ECOS_PREFIX)/include
    DEFINES += -D__ECOS=1 -DUNIX=1 -DHAVE_SIGNAL=0 -DHAVE_MMAP=0 -DHAVE_SELECT=0 -DHAVE_FPRINTF=0
    CFLAGS += -mcpu=strongarm -Wall -ffunction-sections -fdata-sections -O2 -g
    LDFLAGS += -nostdlib
	LIBM =
endif

ifeq ($(ARCH), TRIMEDIA)
COMPILER = cc
CXX_COMPILER = CC
TOOLSPREFIX = tm
ARFLAGS = r
DEFINES += -DTRIMEDIA=1 -DTCS2 -DOSAL -DLUD_USE_MEMSPACE
DEFINES += -DHAVE_SIGNAL=0 -DHAVE_FPRINTF=0 -DMW_FEATURE_TIMERS=0
INCLUDEDIRS += -I$(LUD_ROOT)/src/include -I$(LUD_ROOT)/src/modules/fb/include
HOSTCFLAGS += -I$(LUD_ROOT)/src/include -I$(LUD_ROOT)/src/modules/fb/include
CFLAGS += -O2 -el -target tm1 -host nohost -tmconfig=$(LUD_ROOT)/src/misc/tmconfig2.1 -B -Xdiag=1
LDFLAGS += -O2 -el -target tm1 -host nohost -tmconfig=$(LUD_ROOT)/src/misc/tmconfig2.1 -B -Xdiag=1
# include the following line for static libraries
#LDFLAGS += -static
LUD_ROOT = ../../../../../../..
endif

ifeq ($(ARCH), NDS)
TOOLSPREFIX = arm-eabi-
DEFINES += -DNDS=1 -DUNIX=0 -DHAVE_MMAP=0 -DNOMAIN
INCLUDEDIRS += -I$(DEVKITPRO)/libnds/include -DARM9
CFLAGS += -march=armv5te -mtune=arm946e-s -fomit-frame-pointer -ffast-math -mthumb-interwork
#CFLAGS += -mthumb 
CFLAGS += -O2 -s
export PORTLIBS	:=	$(DEVKITPRO)/portlibs/arm
export PATH		:=	$(DEVKITARM)/bin:$(PORTLIBS)/bin:$(PATH)
SCREEN_HEIGHT=192
SCREEN_WIDTH=256
endif

ifeq ($(ARCH), PSP)
PSPSDK = $(shell psp-config --pspsdk-path)
TOOLSPREFIX = $(PSPTOOLSPREFIX)
DEFINES += -DPSP=1 -DHAVE_SIGNAL=0 -DHAVE_MMAP=0 -DHAVE_FPRINTF=0
CFLAGS += -I$(PSPSDK)/include -G0 -O2 -DARCH_NEED_ALIGN32 -D_PSP_FW_VERSION=371
#CFLAGS += -s
LDFLAGS += -L$(PSPSDK)/lib
PLIB := $(shell psp-config --pspsdk-path)/lib
LDFLAGS += -lc -lpspdebug -lpspdisplay -lpspge -lpspctrl -lpspsdk \
	-lpspnet -lpspnet_inet -lpspnet_apctl -lpspnet_resolver -lpsputility -lpspuser -lpspkernel -lpsplibc 
endif

ifeq ($(ARCH), ELKS)
COMPILER = bcc
INCLUDEDIRS += -I/usr/bcc/include -I/home/greg/net/elks/include
DEFINES += -DELKS=1 -DUNIX=1 -Dconst= -Dvolatile=
CFLAGS += -0 -ansi -O
endif

ifeq ($(ARCH), CYGWIN)
# __CYGWIN__ is automatically defined
DEFINES += -DUNIX=1
# include the following line for static libraries
#LDFLAGS += -static
endif

ifeq ($(ARCH), DJGPP)
SHELL = bash
DEFINES += -DDOS_DJGPP=1 -D_NAIVE_DOS_REGS=1 -DMSDOS=1
LDFLAGS += -lgrx20
endif

ifeq ($(ARCH), ANDROID)
TOOLSPREFIX = $(ANDROIDTOOLSPREFIX)
# FIXME remove __ANDROID__ instead of _ANDROID_ in nx11/*.c
DEFINES += -DLINUX=1 -DUNIX=1 -DARCH_NEED_ALIGN32 -D_ANDROID_=1 -D__ANDROID__=1
CFLAGS += -mstructure-size-boundary=8 -I$(HOME)/android-toolchain/user/armeabi-v7a/include
#CFLAGS += -s
LDFLAGS += -L$(HOME)/android-toolchain/usr/armeabi-v7a/lib
#add liblog to support logcat
LDFLAGS += -L$(HOME)/android-toolchain/sysroot/usr/lib -llog
endif

ifeq ($(ARCH), EMSCRIPTEN)
COMPILER = emcc
CXX_COMPILER = emcc
ARCHIVER = emar
LIBM =
DEFINES += -DEMSCRIPTEN=1
CFLAGS += -s USE_SDL=2 -s USE_ZLIB=1 -s USE_FREETYPE=1 -s USE_LIBPNG=1
CFLAGS += -s EMTERPRETIFY=1 -s EMTERPRETIFY_ASYNC=1 -s WASM=0
CFLAGS += -s TOTAL_MEMORY=67108864
CFLAGS += -s ERROR_ON_UNDEFINED_SYMBOLS=0
ifeq ($(VERBOSE), Y)
CFLAGS += -v
endif
endif

#
# FIXME the following ALLEGRO4/5 should completely be specified in config and not here
#

# ALLEGRO5
ifeq ($(SCREEN), ALLEGRO5)
DEFINES += -DALLEGRO=1
ifeq ($(ARCH),ANDROID)
  #LDFLAGS += -L$(HOME)/allegro5111/ba/lib -lallegro-debug 
  LDFLAGS += -Landroid/buildandroid/lib -lallegro-debug 
else
  LDFLAGS += -lallegro 
endif
endif

# ALLEGRO4
ifeq ($(SCREEN), ALLEGRO4)
#for srvmain.c and winmain.c
DEFINES += -DALLEGRO=1
LDFLAGS += -lalleg 
endif
